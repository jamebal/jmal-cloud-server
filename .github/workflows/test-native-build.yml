name: Build and Push Multi-Arch Native Image (Multi-Stage Docker)

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Multi-Arch Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        # QEMU 仍然是必需的，以便 amd64 runner 可以构建 arm64 镜像
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_USERNAME }}
          password: ${{ secrets.GHCR_IO_TOKEN }}

      - name: Extract project version from pom.xml
        id: project_version
        run: |
          VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV

      # 核心步骤：构建并推送多架构镜像
      # 所有复杂的构建逻辑都已封装在 Dockerfile.native 中
      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.native
          push: true
          # buildx 会为每个平台执行一次 Dockerfile 构建
          platforms: linux/amd64,linux/arm64
          tags: |
            jmal/jmalcloud_native:test
            ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test
          build-args: |
            VERSION=${{ env.PROJECT_VERSION }}
          # 启用 Docker build cache，加速后续构建
          cache-from: type=gha
          cache-to: type=gha,mode=max
