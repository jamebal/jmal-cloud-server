name: Build test native (Multi-Arch)

on:
  workflow_dispatch:

jobs:
  build-per-arch:
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
            march: x86-64-v3
            self_hosted_label: [self-hosted, Linux, X64]
          - arch: arm64
            os: ubuntu-22.04-arm
            march: armv8-a
            self_hosted_label: [self-hosted, Linux, ARM64]

    runs-on: ${{ matrix.self_hosted_label }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add Maven to PATH
        run: |
          echo "/opt/maven/bin" >> $GITHUB_PATH

      - name: Set up GraalVM for Native Image
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      - name: Check Maven version
        run: mvn -v

      # 构建带插桩的 Native Image
      - name: Build Instrumented Native Image
        run: |
          mvn clean package -Pnative -DskipTests -Dnative.xmx.arg="-J-Xmx20g" -Dnative.pgo.arg="--pgo-instrument" -Dnative.output.arg="-o target/jmalcloud-instrumented"

      # 运行插桩程序以生成 Profile 文件
      - name: Run Instrumented App to Generate Profile
        run: |
          # 赋予执行权限
          chmod +x target/jmalcloud-instrumented
          
          rm -rf ${HOME}/jmalcloud
          rm -f jmalcloud.iprof
          
          mkdir ${HOME}/jmalcloud
          
          echo "Starting instrumented application in the background..."
          # 在后台运行程序，并将 profile 文件名指定为 jmalcloud.iprof
          # 使用 & 将其放入后台
          ./target/jmalcloud-instrumented -XX:ProfilesDumpFile='jmalcloud.iprof' --spring.data.mongodb.uri=${{secrets.MONGODB_URI}} --file.rootDir=${HOME}/jmalcloud > "${HOME}/app.log" 2>&1 &
          
          # 获取后台进程的 PID (Process ID)
          APP_PID=$!
          echo "应用程序已启动，进程ID为: $APP_PID"
          
          # 等待应用启动
          for i in {1..30}; do
            if curl -s http://localhost:8088/public/health | grep -q '^UP'; then
              echo "App is up"
              break
            fi
            sleep 2
          done
          
          # 创建管理员
          curl --location --request POST 'http://localhost:8088/public/initialization?password=123456&id=&username=admin&showName=%E7%AE%A1%E7%90%86%E5%91%981&avatar=https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&slogan=&introduction=&webpDisabled=&roles=&quota=10'
          # 上传文件
          cp -r target/test-classes ${HOME}/jmalcloud/admin/
          
          # 等待应用程序运行一段时间以收集性能数据
          echo "等待应用程序运行 120 秒以收集性能数据..."
          sleep 120
          
          # 打印日志文件的最后 100 行
          tail -n 100 "${HOME}/app.log"
          
          echo "发送 SIGINT 信号来优雅地终止进程，这会触发 profile 文件的写入"
          kill -15 $APP_PID
          
          echo "等待几秒钟，让进程优雅地终止..."
          sleep 5
          
          ls -lh 'jmalcloud.iprof'
          
          ls -lh 'jmalcloud.iprof'

      # 验证 Profile 文件是否已创建
      - name: Verify Profile File Creation
        run: |
          echo "Checking if profile file was created..."
          ls -l jmalcloud.iprof
          if [ ! -f "jmalcloud.iprof" ]; then
            echo "Error: Profile file jmalcloud.iprof was not created."
            exit 1
          fi

      # 使用 Profile 文件构建最终优化的 Native Image -march=compatibility
      - name: Build PGO-Optimized Native Image -march=compatibility
        run: mvn clean package -Pnative -DskipTests -Dnative.march.arg="-march=compatibility" -Dnative.pgo.arg="--pgo=jmalcloud.iprof" -Dnative.output.arg="-o target/jmalcloud"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_USERNAME }}
          password: ${{ secrets.GHCR_IO_TOKEN }}

      - name: Extract project version from pom.xml
        id: project_version
        run: |
          VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build and push arch-specific image -march=compatibility
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          file: ./Dockerfile
          push: true
          tags: |
            jmal/jmalcloud_native:test-${{ matrix.arch }}
            ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            VERSION=${{ env.PROJECT_VERSION }}

      - name: Inspect the pushed image RIGHT AFTER push
        if: ${{ success() }}
        run: |
          echo "--- Inspecting Docker Hub image ---"
          docker manifest inspect jmal/jmalcloud_native:test-${{ matrix.arch }}
          
          echo "--- Inspecting GHCR image ---"
          docker manifest inspect ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-${{ matrix.arch }}

      # 使用 Profile 文件构建最终优化的 Native Image -march=${{ matrix.march }}
      - name: Build PGO-Optimized Native Image -march=${{ matrix.march }}
        run: mvn clean package -Pnative -DskipTests -Dnative.march.arg='-march=${{ matrix.march }}' -Dnative.pgo.arg="--pgo=jmalcloud.iprof" -Dnative.output.arg="-o target/jmalcloud"

      - name: Build and push arch-specific image -march=${{ matrix.march }}
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          file: ./Dockerfile
          push: true
          tags: |
            jmal/jmalcloud_native_${{ matrix.march }}:test-${{ matrix.arch }}
            ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_${{ matrix.march }}:test-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            VERSION=${{ env.PROJECT_VERSION }}

      - name: Inspect the pushed image RIGHT AFTER push -march=${{ matrix.march }}
        if: ${{ success() }}
        run: |
          echo "--- Inspecting Docker Hub image ---"
          docker manifest inspect jmal/jmalcloud_native_${{ matrix.march }}:test-${{ matrix.arch }}
          
          echo "--- Inspecting GHCR image ---"
          docker manifest inspect ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_${{ matrix.march }}:test-${{ matrix.arch }}

  merge-manifests:
    needs: build-per-arch
    runs-on: ubuntu-latest

    steps:
      - name: Wait for registry to become consistent
        run: |
          echo "Waiting for 30 seconds to allow registry caches to update..."
          sleep 30

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_USERNAME }}
          password: ${{ secrets.GHCR_IO_TOKEN }}

      - name: Create and push Docker Hub manifest
        run: |
          docker manifest create jmal/jmalcloud_native:test \
            --amend jmal/jmalcloud_native:test-amd64 \
            --amend jmal/jmalcloud_native:test-arm64
          docker manifest push jmal/jmalcloud_native:test

      - name: Create and push Docker Hub manifest march
        run: |
          docker manifest create jmal/jmalcloud_native_o3:test \
            --amend jmal/jmalcloud_native_x86-64-v3:test-amd64 \
            --amend jmal/jmalcloud_native_armv8-a:test-arm64
          docker manifest push jmal/jmalcloud_native_o3:test

      - name: Create and push GHCR manifest
        run: |
          docker manifest create ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test \
            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-amd64 \
            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-arm64
          docker manifest push ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test

      - name: Create and push GHCR manifest march
        run: |
          docker manifest create ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_o3:test \
            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_x86-64-v3:test-amd64 \
            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_armv8-a:test-arm64
          docker manifest push ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native_o3:test
