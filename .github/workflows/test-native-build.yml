name: Build test native (Multi-Arch)

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  build-per-arch:
    strategy:
      matrix:
        include:
          - arch: amd64
            os: ubuntu-latest
          - arch: arm64
            os: ubuntu-22.04-arm

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract project version from pom.xml
        id: project_version
        run: |
          VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Set up GraalVM for Native Image
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      - name: Build Native Image with Maven
        run: mvn clean package -Pnative -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_IO_USERNAME }}
          password: ${{ secrets.GHCR_IO_TOKEN }}

      - name: Build and push arch-specific image
        uses: docker/build-push-action@v5
        with:
          context: .
          # 为了调试，暂时禁用 buildx 缓存，确保完全干净
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false # 禁用构建证明，排除干扰
          file: ./Dockerfile.native
          push: true
          # 只构建并推送当前运行器架构的镜像
          # 并使用一个带架构后缀的临时标签
          tags: |
            jmal/jmalcloud_native:test-${{ matrix.arch }}
            ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            VERSION=${{ env.PROJECT_VERSION }}

      # ======================= 新增的调试步骤 =======================
      - name: Inspect the pushed image RIGHT AFTER push
        if: always() # 保证即使前面步骤失败也运行此步骤
        run: |
          echo "--- Inspecting Docker Hub image ---"
          docker manifest inspect jmal/jmalcloud_native:test-${{ matrix.arch }}
          
          echo "--- Inspecting GHCR image ---"
          docker manifest inspect ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-${{ matrix.arch }}
      # =============================================================

#  merge-manifests:
#    # 等待所有架构的构建都完成后再运行
#    needs: build-per-arch
#    runs-on: ubuntu-latest # 合并操作不耗资源，用哪个都行
#
#    steps:
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ secrets.GHCR_IO_USERNAME }}
#          password: ${{ secrets.GHCR_IO_TOKEN }}
#
#      - name: Create and push Docker Hub manifest
#        run: |
#          docker manifest create jmal/jmalcloud_native:test \
#            --amend jmal/jmalcloud_native:test-amd64 \
#            --amend jmal/jmalcloud_native:test-arm64
#          docker manifest push jmal/jmalcloud_native:test
#
#      - name: Create and push GHCR manifest
#        run: |
#          docker manifest create ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test \
#            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-amd64 \
#            --amend ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test-arm64
#          docker manifest push ghcr.io/${{ secrets.GHCR_IO_USERNAME }}/jmalcloud_native:test
