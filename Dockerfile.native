## --- 阶段一: 构建基础 (使用与 CI 匹配的 GraalVM 镜像) ---
## 使用官方的 GraalVM 镜像作为构建环境
#FROM ghcr.io/graalvm/graalvm-community:24.0.2 AS builder
## 将构建上下文复制到镜像中
#WORKDIR /work
#
## 仅复制构建定义文件
#COPY .mvn/ .mvn
#COPY mvnw pom.xml ./
#
## 下载所有依赖。只要 pom.xml 不变，这一层就会被缓存，节省大量时间
#RUN ./mvnw dependency:go-offline
#
## 复制项目的源代码
#COPY src/ src/
#
#RUN ./mvnw clean package -Pnative -DskipTests

FROM ghcr.io/jamebal/jmalcloud_base:latest

ARG VERSION

ENV MONGODB_URI "mongodb://mongo:27017/jmalcloud"
ENV RUN_ENVIRONMENT prod
ENV JVM_OPTS ""
ENV LOG_LEVEL warn

# 是否开启精确搜索
ENV EXACT_SEARCH false
ENV NGRAM_MAX_CONTENT_LENGTH_MB "5"
ENV NGRAM_MIN_SIZE "2"
ENV NGRAM_MAX_SIZE "6"

ENV FILE_MONITOR true
ENV MONITOR_IGNORE_FILE_PREFIX ".DS_Store,._"
ENV FILE_ROOT_DIR /jmalcloud/files
ENV TESS4J_DATA_PATH /jmalcloud/tess4j/datapath

# 从构建器阶段复制编译好的可执行文件
# Spring Boot GraalVM 插件默认会将可执行文件放在 target 目录
COPY target/jmalcloud /app/jmalcloud
COPY target/*.so /app/
RUN chmod +x /app/jmalcloud

VOLUME /jmalcloud/

COPY docker-entrypoint.sh /docker-entrypoint.sh

RUN chmod +x /docker-entrypoint.sh && \
    rm -rf /var/lib/apt/lists/*

EXPOSE 8088

# FTP Server
EXPOSE 8089

# HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 CMD curl -f http://localhost:8088/public/health > /dev/null || exit 1

ENTRYPOINT ["/docker-entrypoint.sh"]
